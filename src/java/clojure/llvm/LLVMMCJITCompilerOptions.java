package clojure.llvm;
import clojure.llvm.LLVM35svnLibrary.LLVMCodeModel;
import clojure.llvm.LLVM35svnLibrary.LLVMMCJITMemoryManagerRef;
import org.bridj.BridJ;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("LLVM-3.5svn") 
public class LLVMMCJITCompilerOptions extends StructObject {
	static {
		BridJ.register();
	}
	@Field(0) 
	public int OptLevel() {
		return this.io.getIntField(this, 0);
	}
	@Field(0) 
	public LLVMMCJITCompilerOptions OptLevel(int OptLevel) {
		this.io.setIntField(this, 0, OptLevel);
		return this;
	}
	@Field(1) 
	public IntValuedEnum<LLVMCodeModel > CodeModel() {
		return this.io.getEnumField(this, 1);
	}
	@Field(1) 
	public LLVMMCJITCompilerOptions CodeModel(IntValuedEnum<LLVMCodeModel > CodeModel) {
		this.io.setEnumField(this, 1, CodeModel);
		return this;
	}
	@Field(2) 
	public int NoFramePointerElim() {
		return this.io.getIntField(this, 2);
	}
	@Field(2) 
	public LLVMMCJITCompilerOptions NoFramePointerElim(int NoFramePointerElim) {
		this.io.setIntField(this, 2, NoFramePointerElim);
		return this;
	}
	@Field(3) 
	public int EnableFastISel() {
		return this.io.getIntField(this, 3);
	}
	@Field(3) 
	public LLVMMCJITCompilerOptions EnableFastISel(int EnableFastISel) {
		this.io.setIntField(this, 3, EnableFastISel);
		return this;
	}
	@Field(4) 
	public LLVMMCJITMemoryManagerRef MCJMM() {
		return this.io.getTypedPointerField(this, 4);
	}
	@Field(4) 
	public LLVMMCJITCompilerOptions MCJMM(LLVMMCJITMemoryManagerRef MCJMM) {
		this.io.setPointerField(this, 4, MCJMM);
		return this;
	}
	public LLVMMCJITCompilerOptions() {
		super();
	}
	public LLVMMCJITCompilerOptions(Pointer pointer) {
		super(pointer);
	}
}
