package llvm;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import llvm.Llvm34Library.LLVMMCJITMemoryManagerRef;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class LLVMMCJITCompilerOptions extends Structure {
	public int OptLevel;
	/** @see LLVMCodeModel */
	public int CodeModel;
	public int NoFramePointerElim;
	public int EnableFastISel;
	public LLVMMCJITMemoryManagerRef MCJMM;
	public LLVMMCJITCompilerOptions() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("OptLevel", "CodeModel", "NoFramePointerElim", "EnableFastISel", "MCJMM");
	}
	public LLVMMCJITCompilerOptions(int OptLevel, int CodeModel, int NoFramePointerElim, int EnableFastISel, LLVMMCJITMemoryManagerRef MCJMM) {
		super();
		this.OptLevel = OptLevel;
		this.CodeModel = CodeModel;
		this.NoFramePointerElim = NoFramePointerElim;
		this.EnableFastISel = EnableFastISel;
		this.MCJMM = MCJMM;
	}
	public LLVMMCJITCompilerOptions(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends LLVMMCJITCompilerOptions implements Structure.ByReference {
		
	};
	public static class ByValue extends LLVMMCJITCompilerOptions implements Structure.ByValue {
		
	};
}
